<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 扫描指定包带注解的类-->
    <context:component-scan base-package="cn.lhzs.web"></context:component-scan>
    <context:component-scan base-package="cn.lhzs.service.impl"></context:component-scan>
    <context:component-scan base-package="cn.lhzs.data.dao"></context:component-scan>
    <context:component-scan base-package="cn.lhzs.data.base"></context:component-scan>
    <context:component-scan base-package="cn.lhzs.task"></context:component-scan>
    <context:component-scan base-package="cn.lhzs.common.aop"></context:component-scan>
    <context:component-scan base-package="cn.lhzs.common.support.http"></context:component-scan>
    <context:component-scan base-package="cn.lhzs.common.util"></context:component-scan>
    <mvc:annotation-driven/>
    <task:annotation-driven/>

    <!-- 配置SessionFactory -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass" value="${jdbc.driverClassName}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.userName}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="acquireIncrement" value="${c3p0.acquireIncrement}"/>
        <property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}"/>
        <property name="initialPoolSize" value="${c3p0.initialPoolSize}"/>
        <property name="maxIdleTime" value="${c3p0.maxIdleTime}"/>
        <property name="maxPoolSize" value="${c3p0.maxPoolSize}"/>
        <property name="maxStatements" value="${c3p0.maxStatements}"/>
        <property name="maxStatementsPerConnection" value="${c3p0.maxStatementsPerConnection}"/>
        <property name="minPoolSize" value="${c3p0.minPoolSize}"/>
    </bean>


    <!-- (事务管理) -->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <aop:aspectj-autoproxy proxy-target-class="true" />
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
    </bean>
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.lhzs.data.dao" />
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.special.InsertListMapper
            </value>
        </property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 文件上传 -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="utf-8"/>
        <property name="maxUploadSize" value="10485760000"/>
        <property name="maxInMemorySize" value="40960"/>
    </bean>

    <!-- 应用上下文 -->
    <bean id="applicationContextUtil" class="cn.lhzs.common.util.ApplicationContextUtil"></bean>

    <!-- jest线程池 -->
    <bean id="jestThreadPool" class="cn.lhzs.common.support.thread.JestThreadPool"></bean>

    <!-- shiro -->
    <bean id="shiroFilterFactoryBean" class="cn.lhzs.web.shiro.ShiroPermissionManage" init-method="updateFilter">
        <property name="loginUrl" value="/unLogin"/>
        <property name="unauthorizedUrl" value="/forbidden"/>
        <property name="securityManager" ref="securityManager"></property>
    </bean>

    <!-- httpClient -->
    <bean id="httpClientConnectionManager" class="org.apache.http.impl.conn.PoolingHttpClientConnectionManager" destroy-method="close">
        <property name="maxTotal" value="200"></property>
        <property name="defaultMaxPerRoute" value="100"></property>
    </bean>
    <bean id="httpRetryHandler" class="cn.lhzs.common.support.http.impl.HttpClient$HttpRetryHandler"/>
    <bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder"
          factory-method="create">
        <property name="connectionManager" ref="httpClientConnectionManager"></property>
        <property name="retryHandler" ref="httpRetryHandler"></property>
    </bean>
    <bean id="requestConfigBuilder" class="org.apache.http.client.config.RequestConfig$Builder">
        <property name="connectionRequestTimeout" value="100000"/>
        <property name="connectTimeout" value="100000"/>
        <property name="socketTimeout" value="100000"/>
        <property name="staleConnectionCheckEnabled" value="true"/>
    </bean>
    <bean id="requestConfig" factory-bean="requestConfigBuilder" factory-method="build"/>

    <!--<context:property-placeholder location="classpath:redis.properties"/>-->
    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="433" />
        <property name="maxIdle" value="333" />
        <property name="minIdle" value="5" />
        <property name="maxWaitMillis" value="20000" />
        <property name="testOnBorrow" value="true" />
    </bean>
    <bean id="connectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="119.23.54.39" />
        <property name="port" value="6379" />
        <property name="password" value="" />
        <property name="poolConfig" ref="poolConfig" />
    </bean>
    <bean id="keyConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="119.23.54.39" />
        <property name="port" value="6379" />
        <property name="password" value="" />
        <property name="poolConfig" ref="poolConfig" />
    </bean>
    <bean id="redisMsgListenerContainer"
          class="org.springframework.data.redis.listener.RedisMessageListenerContainer">
        <property name="connectionFactory" ref="keyConnectionFactory" />
    </bean>

    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="keyConnectionFactory" />
        <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
        <property name="hashKeySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />
        </property>
    </bean>

    <!--<bean id="transRedisTemplate" class="">-->
        <!--<property name="connectionFactory" ref="connectionFactory" />-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer" />-->
        <!--</property>-->
    <!--</bean>-->

</beans>